#include "driverlib.h"
#include "board.h"
#include "shared_vars.h"

// Coeficientes do controlador (substitua com os valores do Python)

#define B0  0.03054f
#define B1 -0.05383f
#define B2  0.02414f
#define A1  0.3136f
#define A2  0.6864f


#define REF 96.0f  // tensão de referência
#define UL 1.0f    // limite superior do duty
#define LL 0.0f    // limite inferior do duty
#define tbprd 5000f
float x[3];  // erro: x[0] = e[k], x[1] = e[k-1], x[2] = e[k-2]
float y[3];  // saída: y[0] = u[k], y[1] = u[k-1], y[2] = u[k-2] (não usado aqui)
//uint16_t cmpa_val = (uint16_t)(tbprd * duty);

//
//    EPWM_setCounterCompareValue(EPWM1_BASE, EPWM_COUNTER_COMPARE_A, cmpa_val);
__interrupt void Cla1Task1()
{
    // Atualiza histórico
    x[2] = x[1];
    x[1] = x[0];
    x[0] = REF -  (ADC_readResult(ADC0_RESULT_BASE, ADC0_SOC0)) * 132.0f / 4095.0f ;  // erro atual

    y[2] = y[1];
    y[1] = y[0];

    // Equação à diferenças (ordem 2)
    y[0] = B0*x[0] + B1*x[1] + B2*x[2] - A1*y[1] - A2*y[2];

    // Saturação
    if (y[0] > UL) y[0] = UL;
    if (y[0] < LL) y[0] = LL;

    fResult = y[0];  // duty cycle
    debug_d = fResult;
    EPWM_setCounterCompareValue(EPWM1_BASE, EPWM_COUNTER_COMPARE_A, (uint16_t)(5000 * fResult)); //tbrpd = 5000
}
